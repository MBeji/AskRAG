"""
Test des endpoints RAG
√âtape 14.9: Validation des endpoints de base du syst√®me RAG
"""

import os
import sys
import asyncio
import logging
from datetime import datetime

# Ajouter le chemin du backend
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Configuration des logs
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Configuration des variables d'environnement pour les tests
os.environ['OPENAI_API_KEY'] = 'test-key-placeholder'
os.environ['ENVIRONMENT'] = 'development'
os.environ['SECRET_KEY'] = 'test-secret-key-for-testing-only'


def test_imports():
    """Test d'import des services RAG"""
    print("=== Test des imports RAG ===")
    
    try:
        # Test des services core
        from app.core.vector_store import vector_store
        from app.core.embeddings import embedding_service
        from app.core.document_extractor import document_extractor
        from app.core.text_chunker import text_chunker
        from app.core.rag_pipeline import rag_pipeline
        print("‚úì Services RAG Core import√©s")
        
        # Test des sch√©mas
        from app.schemas.rag import (
            RAGQueryRequest, RAGQueryResponse,
            DocumentUploadResponse, SearchResult,
            ChatSession, ChatMessage
        )
        print("‚úì Sch√©mas RAG import√©s")
        
        # Test des endpoints (sans d√©marrer le serveur)
        from app.api.v1.endpoints import rag
        print("‚úì Endpoints RAG import√©s")
        
        return True
        
    except Exception as e:
        print(f"‚úó Erreur d'import: {e}")
        return False


def test_rag_pipeline():
    """Test du pipeline RAG avec un document de test"""
    print("\n=== Test du pipeline RAG ===")
    
    try:
        from app.core.rag_pipeline import rag_pipeline
        
        # Cr√©er un document de test
        test_content = """
        AskRAG est une application de RAG (Retrieval-Augmented Generation).
        Elle permet d'analyser des documents et de r√©pondre √† des questions.
        
        L'authentification se fait via JWT (JSON Web Tokens).
        Les utilisateurs peuvent uploader des documents PDF, DOCX, TXT, MD et HTML.
        
        Le syst√®me utilise FAISS pour la vectorisation et OpenAI pour les embeddings.
        Les documents sont d√©coup√©s en chunks intelligemment.
        """
        
        # Test du traitement de document
        result = rag_pipeline.process_document(
            file_content=test_content.encode('utf-8'),
            filename="test_document.txt",
            document_metadata={
                'file_type': 'txt',
                'title': 'Document de test',
                'user_id': 'test_user_123'
            }
        )
        
        if result.get('success'):
            print(f"‚úì Document trait√©: {result['chunking']['total_chunks']} chunks cr√©√©s")
            
            # Test de recherche
            search_result = rag_pipeline.search(
                query="Comment fonctionne l'authentification ?",
                k=3,
                score_threshold=0.1
            )
            
            if search_result.get('results'):
                print(f"‚úì Recherche r√©ussie: {len(search_result['results'])} r√©sultats")
                return True
            else:
                print("‚úó Aucun r√©sultat de recherche")
                return False
        else:
            print(f"‚úó Erreur traitement: {result.get('error')}")
            return False
            
    except Exception as e:
        print(f"‚úó Erreur pipeline RAG: {e}")
        return False


def test_vector_store():
    """Test du vector store FAISS"""
    print("\n=== Test du Vector Store ===")
    
    try:
        from app.core.vector_store import vector_store
        
        # Test d'ajout de document
        doc_id = vector_store.add_document(
            content="Test de vectorisation avec FAISS",
            metadata={'test': True, 'user_id': 'test_user'},
            document_id="test_doc_001"
        )
        print(f"‚úì Document ajout√© avec ID: {doc_id}")
        
        # Test de recherche
        results = vector_store.search(
            query="vectorisation FAISS",
            k=5,
            score_threshold=0.1
        )
        
        if results:
            print(f"‚úì Recherche r√©ussie: {len(results)} r√©sultats")
            best_score = max(r['score'] for r in results) if results else 0
            print(f"  Meilleur score: {best_score:.3f}")
            return True
        else:
            print("‚úó Aucun r√©sultat trouv√©")
            return False
            
    except Exception as e:
        print(f"‚úó Erreur vector store: {e}")
        return False


def test_text_chunker():
    """Test du chunker de texte"""
    print("\n=== Test du Text Chunker ===")
    
    try:
        from app.core.text_chunker import text_chunker, ChunkStrategy
        
        test_text = """
        Premier paragraphe sur l'authentification JWT.
        Les tokens JWT sont s√©curis√©s et permettent l'acc√®s aux API.
        
        Deuxi√®me paragraphe sur les documents.
        L'application supporte PDF, DOCX, TXT, MD et HTML.
        Les documents sont trait√©s par le pipeline RAG.
        
        Troisi√®me paragraphe sur la vectorisation.
        FAISS est utilis√© pour stocker les embeddings.
        OpenAI g√©n√®re les embeddings avec text-embedding-3-small.
        """
        
        # Test avec diff√©rentes strat√©gies
        strategies = [ChunkStrategy.SENTENCE, ChunkStrategy.PARAGRAPH, ChunkStrategy.HYBRID]
        
        for strategy in strategies:
            text_chunker.strategy = strategy
            chunks = text_chunker.chunk_text(
                text=test_text,
                document_id="test_chunking",
                metadata={'test': True}
            )
            
            print(f"‚úì Strat√©gie {strategy.value}: {len(chunks)} chunks")
            
        return True
        
    except Exception as e:
        print(f"‚úó Erreur text chunker: {e}")
        return False


def test_document_extractor():
    """Test de l'extracteur de documents"""
    print("\n=== Test du Document Extractor ===")
    
    try:
        from app.core.document_extractor import document_extractor
        
        # Test avec du contenu texte
        test_content = "Contenu de test pour l'extraction."
        
        result = document_extractor.extract_content(
            file_content=test_content.encode('utf-8'),
            filename="test.txt"
        )
        
        if result['metadata']['extraction_success']:
            print(f"‚úì Extraction r√©ussie: {len(result['content'])} caract√®res")
            
            # Test des formats support√©s
            formats = document_extractor.get_supported_formats()
            print(f"‚úì Formats support√©s: {', '.join(formats)}")
            return True
        else:
            print(f"‚úó Extraction √©chou√©e: {result['metadata'].get('error')}")
            return False
            
    except Exception as e:
        print(f"‚úó Erreur document extractor: {e}")
        return False


def test_schemas():
    """Test des sch√©mas Pydantic"""
    print("\n=== Test des sch√©mas Pydantic ===")
    
    try:
        from app.schemas.rag import (
            RAGQueryRequest, RAGQueryResponse,
            DocumentUploadResponse, SearchResult
        )
        
        # Test RAGQueryRequest
        request = RAGQueryRequest(
            question="Test question",
            session_id="test_session",
            max_chunks=5,
            temperature=0.7
        )
        print(f"‚úì RAGQueryRequest: {request.question}")
        
        # Test SearchResult
        result = SearchResult(
            chunk_id="test_chunk",
            content="Test content",
            score=0.85,
            metadata={'test': True},
            document_title="Test Doc"
        )
        print(f"‚úì SearchResult: score {result.score}")
        
        # Test DocumentUploadResponse
        upload_response = DocumentUploadResponse(
            document_id="doc_123",
            filename="test.pdf",
            title="Test Document",
            chunks_count=10,
            processing_time=1.5,
            status="success",
            message="OK"
        )
        print(f"‚úì DocumentUploadResponse: {upload_response.chunks_count} chunks")
        
        return True
        
    except Exception as e:
        print(f"‚úó Erreur sch√©mas: {e}")
        return False


def main():
    """Fonction principale des tests"""
    print("üî¨ Tests des endpoints RAG - √âtape 14.9")
    print("=" * 60)
    
    tests = [
        ("Imports", test_imports),
        ("Sch√©mas", test_schemas),
        ("Document Extractor", test_document_extractor),
        ("Text Chunker", test_text_chunker),
        ("Vector Store", test_vector_store),
        ("Pipeline RAG", test_rag_pipeline),
    ]
    
    results = []
    
    for name, test_func in tests:
        try:
            success = test_func()
            results.append((name, success))
        except Exception as e:
            print(f"‚úó Erreur dans {name}: {e}")
            results.append((name, False))
    
    # R√©sum√©
    print("\n" + "=" * 60)
    print("=== R√âSUM√â DES TESTS ===")
    
    passed = 0
    for name, success in results:
        status = "‚úì PASS" if success else "‚úó FAIL"
        print(f"{status} - {name}")
        if success:
            passed += 1
    
    total = len(results)
    print(f"\nR√©sultat: {passed}/{total} tests r√©ussis")
    
    if passed == total:
        print("üéâ Tous les tests sont pass√©s ! Les endpoints RAG sont pr√™ts.")
        return True
    else:
        print(f"‚ö†Ô∏è  {total - passed} tests ont √©chou√©. V√©rifiez la configuration.")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
