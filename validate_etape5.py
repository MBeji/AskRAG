"""
√âTAPE 5: Configuration Docker - Validation Finale
V√©rification de tous les fichiers Docker cr√©√©s
"""

import os
from pathlib import Path

def check_files():
    """V√©rifier tous les fichiers Docker cr√©√©s"""
    
    print("üê≥ √âTAPE 5: Configuration Docker - VALIDATION FINALE")
    print("=" * 60)
    
    # Liste des fichiers Docker √† v√©rifier
    docker_files = [
        # Docker Compose
        ("docker-compose.yml", "Configuration production"),
        ("docker-compose.dev.yml", "Configuration d√©veloppement"),
        
        # Environment files
        (".env.docker", "Variables environnement production"),
        (".env.docker.dev", "Variables environnement d√©veloppement"),
        
        # Backend Docker
        ("backend/Dockerfile", "Dockerfile production backend"),
        ("backend/Dockerfile.dev", "Dockerfile d√©veloppement backend"),
        ("backend/.dockerignore", "Docker ignore backend"),
        
        # Frontend Docker  
        ("frontend/Dockerfile", "Dockerfile production frontend"),
        ("frontend/Dockerfile.dev", "Dockerfile d√©veloppement frontend"),
        ("frontend/.dockerignore", "Docker ignore frontend"),
        ("frontend/nginx.conf", "Configuration Nginx"),
        
        # Scripts
        ("scripts/mongo-init.js", "Script initialisation MongoDB"),
        ("scripts/docker-helper.sh", "Script utilitaire Linux"),
        ("scripts/docker-helper.ps1", "Script utilitaire PowerShell"),
    ]
    
    created_files = 0
    total_files = len(docker_files)
    
    print("\nüìã V√âRIFICATION DES FICHIERS DOCKER:")
    print("-" * 60)
    
    for file_path, description in docker_files:
        if os.path.exists(file_path):
            file_size = os.path.getsize(file_path)
            print(f"‚úÖ {file_path:<35} ({file_size:>6} bytes) - {description}")
            created_files += 1
        else:
            print(f"‚ùå {file_path:<35} - MANQUANT - {description}")
    
    print("\n" + "=" * 60)
    print(f"üìä R√âSULTAT: {created_files}/{total_files} fichiers cr√©√©s ({created_files/total_files*100:.0f}%)")
    
    if created_files == total_files:
        print("üéâ SUCC√àS: Tous les fichiers Docker ont √©t√© cr√©√©s!")
        
        print("\nüìù PROCHAINES √âTAPES:")
        print("1. Installer Docker Desktop (si pas d√©j√† fait)")
        print("2. Configurer les variables d'environnement dans .env")
        print("3. D√©marrer l'environnement de d√©veloppement:")
        print("   docker-compose -f docker-compose.dev.yml up --build")
        print("\nüåê SERVICES DISPONIBLES:")
        print("   - Frontend:  http://localhost:5173")
        print("   - Backend:   http://localhost:8000")
        print("   - MongoDB:   localhost:27017")
        print("   - Redis:     localhost:6379")
        
        print("\nüîß UTILISATION DES SCRIPTS:")
        print("   Windows: .\\scripts\\docker-helper.ps1 dev")
        print("   Linux:   ./scripts/docker-helper.sh dev")
        
    else:
        print("‚ùå √âCHEC: Certains fichiers sont manquants")
        
    return created_files == total_files

if __name__ == "__main__":
    success = check_files()
    
    print("\n" + "=" * 60)
    if success:
        print("‚úÖ √âTAPE 5 COMPL√âT√âE AVEC SUCC√àS!")
        print("‚û°Ô∏è  Pr√™t pour √âtape 6: Variables d'environnement")
    else:
        print("‚ùå √âTAPE 5 INCOMPL√àTE - V√©rifier les fichiers manquants")
